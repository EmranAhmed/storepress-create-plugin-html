/**
 * External dependencies
 */
import { createPluginInstance, triggerEvent } from '@storepress/utils'

/**
 * Internal dependencies
 */
import { Plugin } from './Plugin'

export default function StorePressPlugin () {
  const StorePressPlugin = {
    getInstance (element) {
      return createPluginInstance(element, false, Plugin)
    },

    initWith ($selector = '[data-plugin-settings]') {
      for (const { element, unregister } of this.getInstance($selector)) {
        element.addEventListener('destroy', unregister)
      }
    },

    init () {
      for (const { element, unregister } of this.getInstance('[data-plugin-settings]')) {
        element.addEventListener('destroy', unregister)
      }
    },

    destroy () {
      for (const { destroy } of this.getInstance('[data-plugin-settings]')) {
        destroy()
      }
    },

    destroyWith ($selector = '[data-plugin-settings]') {
      for (const { destroy } of this.getInstance($selector)) {
        destroy()
      }
    },
  }

  document.addEventListener('storepress_plugin_init', () => {
    StorePressPlugin.init()
  })

  document.addEventListener('storepress_plugin_destroy', () => {
    StorePressPlugin.destroy()
  })

  document.addEventListener('storepress_plugin_init_with', (event) => {
    const selector = event.detail?.element
    StorePressPlugin.initWith(selector)
  })

  document.addEventListener('storepress_plugin_destroy_with', (event) => {
    const selector = event.detail?.element
    StorePressPlugin.destroyWith(selector)
  })
}

document.addEventListener('DOMContentLoaded', () => {
  StorePressPlugin()
  triggerEvent(document, 'storepress_plugin_init')
})