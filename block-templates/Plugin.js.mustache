/**
 * External dependencies
 */
import { getOptionsFromAttribute, triggerEvent } from '@storepress/utils'

export function Plugin (element, options) {
  // Default Settings
  const DEFAULTS = {}

  const PRIVATE = {}

  // Collecting settings from html attribute
  const ATTRIBUTE = 'plugin-settings' // html data-plugin-settings

  const CLASSES = {
    NEW: 'new-class',
  }

  const noop = () => () => {}

  const getElementComputedStyle = (cssProperty) => {
    return window.getComputedStyle(this.$element).getPropertyValue(cssProperty)
  }

  const getComputedStyle = ($element, property) => {
    return window.getComputedStyle($element).getPropertyValue(property)
  }

  const initial = () => {
    console.log(this.settings)
    triggerEvent(this.$element, 'afterInit', {})
  }

  const addClasses = () => {
    this.$element.classList.add(CLASSES.NEW)
  }

  const addEvents = () => {

    this.$element.addEventListener('click', (e) => {

      console.log(e.target.getAttribute('class'))

    }, { signal: this.signal, passive: true })

  }

  const removeEvents = () => {

    this.controller.abort('Reset')
  }

  const removeClasses = () => {
    this.$element.classList.remove(CLASSES.NEW)
  }

  const reset = () => {
    removeClasses()
    removeEvents()
  }

  // Expose reset to public.
  const expose = () => ({
    reset,
  })

// Do what you need and return expose fn.
  const init = () => {
    this.$element = element
    this.settings = {
      ...DEFAULTS, ...options, ...getOptionsFromAttribute(this.$element, ATTRIBUTE), ...PRIVATE,
    }

    this.controller = new AbortController()
    this.signal = this.controller.signal

    initial()

    addClasses()

    addEvents()

    return expose()
  }

  return init()
}